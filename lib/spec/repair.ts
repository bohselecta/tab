import { z } from "zod";

const SectionZ = z.object({
  kind: z.enum(["hero","feature","cta","faq","pricing","gallery","comparison","testimonial","custom"]),
  copy: z.string().default(""),
  img_placeholder: z.object({
    w: z.number().int().positive().max(2400).default(1200),
    h: z.number().int().positive().max(2400).default(800),
    alt: z.string().default("Illustrative placeholder"),
    prompt: z.string().default(""),
  }).optional(),
});

const PageZ = z.object({
  path: z.string(),
  title: z.string(),
  sections: z.array(SectionZ).default([]),
});

const WebSpecZ = z.object({
  site: z.object({
    brand: z.string(),
    pages: z.array(PageZ).min(1).max(6),
    seo: z.object({
      title: z.string().max(60),
      description: z.string().min(90).max(165),
    }),
  }),
  export: z.object({
    repo_scaffold: z.array(z.object({ path: z.string(), contents: z.string() })).default([]),
    design_variability: z.array(z.string()).default([]),
  }),
});

export function sanitizeAndRepairWebSpec(input: any, opts: { sectionCap: number; wordCap: number }) {
  // 1) Shape & defaults
  let parsed = WebSpecZ.safeParse(input);
  if (!parsed.success) {
    // try a soft repair: pick minimal fields and coerce
    input.site ||= {};
    input.site.brand ||= "Project";
    input.site.pages ||= [{ path:"/", title:"Home", sections:[] }];
    input.site.seo ||= { title: "Project â€” Preview", description: "Preview generated by Tablature." };
    parsed = WebSpecZ.safeParse(input);
  }
  let spec = parsed.success ? parsed.data : (input as any);

  // 2) Repairs & clamps
  spec.site.pages = spec.site.pages.slice(0, 5).map((p: any) => {
    p.path = normalizePath(p.path);
    p.title ||= titleFromPath(p.path);
    p.sections = clampSectionsAndCopy(p.sections, opts.sectionCap, opts.wordCap);
    return p;
  });

  // SEO clamps
  spec.site.seo.title   = clampChars(spec.site.seo.title, 60);
  spec.site.seo.description = clampChars(spec.site.seo.description, 160, 120);

  return { mode:"web", creation: { site: spec.site, export: spec.export } };
}

function clampSectionsAndCopy(sections: any[], cap: number, wordCap: number) {
  const kinds = new Set<string>();
  const out: any[] = [];
  for (const s of sections) {
    if (!["hero","feature","cta","faq","pricing","gallery","comparison","testimonial","custom"].includes(s.kind)) continue;
    // optional: allow duplicates except hero
    if (s.kind === "hero" && kinds.has("hero")) continue;
    s.copy = clampWords(s.copy || "", wordCap);
    if (s.img_placeholder && !s.img_placeholder.alt) {
      s.img_placeholder.alt = "Illustrative placeholder";
    }
    out.push(s);
    kinds.add(s.kind);
    if (out.length >= cap) break;
  }
  return out;
}

const clampWords = (t: string, n: number) => t.split(/\s+/).slice(0, n).join(" ");
const clampChars = (t: string, max: number, min = 0) => t.slice(0, max).padEnd(Math.max(t.length, min), " ").trim();
const normalizePath = (p: string) => p.startsWith("/") ? p : `/${p}`;
const titleFromPath = (p: string) => p === "/" ? "Home" : p.replace(/\//g," ").trim().replace(/\b\w/g, m => m.toUpperCase());
